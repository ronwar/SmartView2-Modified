<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:controls="clr-namespace:SmartView2.Controls">
  <SolidColorBrush x:Key="PopupNormalBackground" Color="#323B48" />
  <SolidColorBrush x:Key="ButtonBlackBorder" Color="#171b1f" />
  <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 3 L 7 0</Geometry>
  <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="Chrome" CornerRadius="3" BorderThickness="1" BorderBrush="{StaticResource ButtonBlackBorder}" Background="{StaticResource Button.Static.BackgroundBrush}" SnapsToDevicePixels="True">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter Grid.Column="0" />
              <Grid Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Grid.Column="1">
                <Path Name="Arrow" Data="{StaticResource DownArrowGeometry}" Stroke="#FFFFFFFF" HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center" />
              </Grid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Arrow" Property="Shape.Fill" Value="#FFAFAFAF" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Arrow" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="180" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxSourceStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left" />
    <Setter Property="Control.FontSize" Value="18" />
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="FrameworkElement.Margin" Value="10,10,0,0" />
    <Setter Property="Control.Foreground" Value="{StaticResource Button.Static.ForegroundBrush}" />
    <Setter Property="Control.BorderBrush" Value="{StaticResource ButtonBlackBorder}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Control.Padding" Value="8,3" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid Name="MainGrid" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
            </Grid.ColumnDefinitions>
            <Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" VerticalOffset="0" Placement="Bottom" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">
              <Border Name="DropDownBorder" CornerRadius="0 0 8 8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" BorderBrush="#FF171B1F" BorderThickness="0 1 1 1" Background="#FF323B48" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                <ScrollViewer Name="DropDownScrollViewer" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                  <Grid RenderOptions.ClearTypeHint="Enabled">
                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                      <Rectangle Name="OpaqueRect" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                    </Canvas>
                    <ItemsPresenter Name="ItemsPresenter" Margin="0" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                  </Grid>
                </ScrollViewer>
              </Border>
            </Popup>
            <ToggleButton Name="_toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}" Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxReadonlyToggleButton}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ContentPresenter ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="False" Margin="20,10" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Selector.SelectedIndex" Value="-1">
              <Setter TargetName="_toggleButton" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType=ComboBox}}" Property="ContentControl.Content" />
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="False">
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
              <Setter Property="Control.Background" Value="#FFF4F4F4" />
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="True">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
              <Setter TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" Property="Canvas.Top" />
              <Setter TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" Property="Canvas.Left" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxItemSourceStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="Control.HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="20,0,5,0" />
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="FrameworkElement.Height" Value="40" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Bd" Value="{StaticResource Button.MouseOver.BorderBrush}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="True">
              <Setter TargetName="Bd" Value="{StaticResource Button.MouseOver.BorderBrush}" Property="Border.Background" />
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="Control.Foreground" Value="#FF000000" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RoundButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{StaticResource Button.Static.BackgroundBrush}" />
    <Setter Property="Control.Foreground" Value="{StaticResource Button.Static.ForegroundBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.FontFamily" Value="Arial" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Width="60" Height="60">
            <Ellipse Name="EllipsePl1" Fill="{TemplateBinding Control.Background}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="Control.Foreground" Value="#FF000000" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="EllipsePl1" Value="{StaticResource Button.MouseOver.BorderBrush}" Property="Shape.Stroke" />
              <Setter TargetName="EllipsePl1" Property="Shape.StrokeThickness" Value="2" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="EllipsePl1" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Shape.Fill" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TransparentToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.FontFamily" Value="Arial" />
    <Setter Property="Control.FontSize" Value="14" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="FrameworkElement.Width" Value="60" />
    <Setter Property="FrameworkElement.Height" Value="45" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" CornerRadius="5">
            <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="Control.Foreground" Value="#FF646B75" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Border.BorderBrush" Value="#FF4FB2F6" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="Control.Background" Value="#FF4FB2F6" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RoundToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{StaticResource DarkButton.Static.BackgroundBrush}" />
    <Setter Property="Control.Foreground" Value="{StaticResource Button.Static.ForegroundBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Width="60" Height="60">
            <Ellipse Name="EllipsePl1" Fill="{TemplateBinding Control.Background}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="Control.Foreground" Value="#FF000000" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="EllipsePl1" Value="{StaticResource Button.MouseOver.BorderBrush}" Property="Shape.Stroke" />
              <Setter TargetName="EllipsePl1" Property="Shape.StrokeThickness" Value="2" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="EllipsePl1" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Shape.Fill" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CCDataButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource RoundButtonStyle}">
    <Setter Property="ContentControl.Content">
      <Setter.Value>
        <Border Padding="5,3" BorderThickness="2" BorderBrush="{StaticResource TextBlock.Static.ForegroundBrush}">
          <TextBlock Text="CC" />
        </Border>
      </Setter.Value>
    </Setter>
    <Setter Property="UIElement.Visibility" Value="Collapsed" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding TargetDevice.IsUSABoard}" Value="True" />
          <Condition Binding="{Binding TargetDevice.IsCloneView}" Value="False" />
          <Condition Binding="{Binding IsCcDataEnabled}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="UIElement.Visibility" Value="Visible" />
      </MultiDataTrigger>
      <DataTrigger Binding="{Binding IsCcDataButtonPressed}" Value="True">
        <Setter Property="Control.Background" Value="{StaticResource Button.MouseOver.BorderBrush}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ChannelUpButtonStyle" BasedOn="{StaticResource RoundButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="ContentControl.Content">
      <Setter.Value>
        <Path Data="M0,15L15,0 30,15" StrokeThickness="4" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ChannelDownButtonStyle" BasedOn="{StaticResource RoundButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="ContentControl.Content">
      <Setter.Value>
        <Path Data="M0,0L15,15 30,0" StrokeThickness="4" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ScrollBarDisabledBackground" Color="#F4F4F4" />
  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="{StaticResource ScrollBarThumb.Static.BackgroundBrush}" Width="9" CornerRadius="4" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ChListScrollBarStyle" TargetType="{x:Type ScrollBar}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="FrameworkElement.Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
    <Setter Property="FrameworkElement.MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid Name="Bg" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
              <RowDefinition Height="9" />
              <RowDefinition Height="*" />
              <RowDefinition Height="9" />
            </Grid.RowDefinitions>
            <Track Name="PART_Track" IsDirectionReversed="True" IsEnabled="{TemplateBinding UIElement.IsMouseOver}" Grid.Row="1">
              <Track.Thumb>
                <Thumb Style="{StaticResource ScrollBarThumb}" />
              </Track.Thumb>
            </Track>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}" Property="Panel.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ScrollViewerControlTemplate1" TargetType="{x:Type ScrollViewer}">
    <Grid Name="Grid" Background="{TemplateBinding Control.Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Rectangle Name="Corner" Grid.Column="1" Fill="#FFFF0000" Grid.Row="1" />
      <ScrollContentPresenter Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Content="{TemplateBinding ContentControl.Content}" Grid.Column="0" Margin="{TemplateBinding Control.Padding}" Grid.Row="0" />
      <ScrollBar Name="PART_VerticalScrollBar" Style="{StaticResource ChListScrollBarStyle}" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
    </Grid>
  </ControlTemplate>
  <Style x:Key="ChListListViewItemStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.FontFamily" Value="Arial" />
    <Setter Property="Control.FontSize" Value="14" />
    <Setter Property="Control.FontWeight" Value="Bold" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border Name="SelectedBorder" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" BorderBrush="#00FFFFFF" BorderThickness="0" Background="#00FFFFFF">
            <Grid>
              <ContentPresenter Margin="10,15,10,15" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
              <Path VerticalAlignment="Bottom" Data="M0,0L10,0" Stroke="#FF808080" Stretch="Fill" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="True">
              <Setter Property="UIElement.Focusable" Value="True" />
              <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
              <Setter TargetName="SelectedBorder" Property="Border.Background" Value="#FF4FB2F6" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="Selector.IsSelectionActive" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ListBorder" Color="#828790" />
  <Style x:Key="ChListListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="Control.Background" Value="#FF323B48" />
    <Setter Property="Control.BorderBrush" Value="#FF000000" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Foreground" Value="#FF808080" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="ListBox.SelectionMode" Value="Single" />
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ChListListViewItemStyle}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border Name="Bd" BorderBrush="#FFFFFFFF" BorderThickness="0,1,0,0" Background="#00FFFFFF" Padding="1" SnapsToDevicePixels="True">
            <ScrollViewer Focusable="False" Padding="{TemplateBinding Control.Padding}" Template="{StaticResource ScrollViewerControlTemplate1}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="True">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <GeometryGroup x:Key="ToDeviceGeometry">
    <PathGeometry Figures="M 0 25 L 30 25 M 5 25 L 5 20 M 25 25 L 25 5 L 5 5 L 5 10 M 0 15 L 15 15" />
    <PathGeometry Figures="M 15 15 L 13 13.5 L 13 16.5 Z" />
  </GeometryGroup>
  <GeometryGroup x:Key="ToTvGeometry">
    <PathGeometry Figures="M 10 26 L 25 26 M 5 18 L 5 22 L 30 22 L 30 7 L 5 7 L 5 12 M 0 15 L 20 15" />
    <PathGeometry Figures="M 20 15 L 18 13.5 L 18 16.5 Z" />
  </GeometryGroup>
  <Style x:Key="ButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />
  <Style x:Key="SendToTvButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{StaticResource Button.Static.BackgroundBrush}" />
    <Setter Property="Control.BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="FrameworkElement.ToolTip" Value="{Binding MAPP_SID_SEND_TO_TV, Source={StaticResource LocalizationSource}}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="Chrome" CornerRadius="10, 0, 0, 10" BorderThickness="1,1,0.5,1" BorderBrush="{TemplateBinding Control.BorderBrush}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <Path Data="{StaticResource ToTvGeometry}" Stroke="#FFD3D3D3" StrokeThickness="2" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Chrome" Value="{StaticResource Button.MouseOver.BorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="Chrome" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Border.BorderBrush" />
              <Setter TargetName="Chrome" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SendToDeviceButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{StaticResource Button.Static.BackgroundBrush}" />
    <Setter Property="Control.BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="FrameworkElement.ToolTip" Value="{Binding MAPP_SID_SEND_TO_PC, Source={StaticResource LocalizationSource}}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="Chrome" CornerRadius="0, 10, 10, 0" BorderThickness="0.5,1,1,1" BorderBrush="{TemplateBinding Control.BorderBrush}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <Path Data="{StaticResource ToDeviceGeometry}" Stroke="#FFD3D3D3" StrokeThickness="2" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Chrome" Value="{StaticResource Button.MouseOver.BorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="Chrome" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Border.BorderBrush" />
              <Setter TargetName="Chrome" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ChannelListCloseButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="5" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="Chrome" BorderBrush="{TemplateBinding Control.BorderBrush}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Control.Padding}">
            <Path Data="M0,0L10,10 M0,10L10,0" StrokeThickness="2" Stretch="Uniform" Stroke="#FFFFFFFF" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TvViewVolumeToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource RoundToggleButtonStyle}">
    <Setter Property="ContentControl.Content">
      <Setter.Value>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          <Path VerticalAlignment="Center" HorizontalAlignment="Center" Data="M20,0L20,24 13,17 5,17 5,7 13,7" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" />
          <Path VerticalAlignment="Center" Grid.Column="1" Data="M12,0A25,25,50,0,1,12,30 M9,5A20,20,50,0,1,9,25 M5,10A15,15,50,0,1,5,20" StrokeThickness="2" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" />
        </Grid>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TvViewVolumeComboBoxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="Control.Background" Value="{StaticResource Button.Static.BackgroundBrush}" />
    <Setter Property="Control.Foreground" Value="{StaticResource Button.Static.ForegroundBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Border Name="popUp" VerticalAlignment="Bottom" Height="100" CornerRadius="18,18,0,0" Background="{StaticResource LightBackgroundBrush}" Margin="10,0,10,-10" Visibility="Collapsed">
              <Slider Minimum="0" Maximum="1" Orientation="Vertical" HorizontalAlignment="Center" Margin="0,10,0,15" Style="{DynamicResource VolumeVerticalSliderStyle}" IsMoveToPointEnabled="True" Value="{Binding Volume, Mode=TwoWay}" />
            </Border>
            <ToggleButton Grid.Row="1" Style="{StaticResource TvViewVolumeToggleButtonStyle}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ComboBox.IsDropDownOpen" Value="True">
              <Setter TargetName="popUp" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TvViewNavigationComboBoxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <Popup Name="popUp" Placement="Top" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PlacementTarget="{Binding ElementName=NavigationButton}">
              <Border VerticalAlignment="Bottom" CornerRadius="18,18,0,0" Background="{StaticResource LightBackgroundBrush}">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Button Grid.Row="0" Grid.Column="1" Style="{StaticResource RemoteControlUpButtonStyle}" Command="{Binding TargetDevice.CurrentSource.RemoteControl.JoystickUp}" />
                  <Button Grid.Row="1" Grid.Column="0" Style="{StaticResource RemoteControlLeftButtonStyle}" Command="{Binding TargetDevice.CurrentSource.RemoteControl.JoystickLeft}" />
                  <Button Grid.Row="1" Grid.Column="1" Style="{StaticResource RemoteControlEnterButtonStyle}" Command="{Binding TargetDevice.CurrentSource.RemoteControl.JoystickOk}" />
                  <Button Grid.Row="1" Grid.Column="2" Style="{StaticResource RemoteControlRightButtonStyle}" Command="{Binding TargetDevice.CurrentSource.RemoteControl.JoystickRight}" />
                  <Button Grid.Row="2" Grid.Column="1" Style="{StaticResource RemoteControlDownButtonStyle}" Command="{Binding TargetDevice.CurrentSource.RemoteControl.JoystickDown}" />
                </Grid>
              </Border>
            </Popup>
            <ToggleButton Name="NavigationButton" Style="{StaticResource TransparentToggleButtonStyle}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <ToggleButton.Content>
                <Path Data="M9,9L18,0 27,9 9,9 M27,11L36,20 27,29 27,11 M27,31L18,40 9,31 27,31 M9,29L0,20 9,11 9,29" Fill="#FFFFFFFF" />
              </ToggleButton.Content>
            </ToggleButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#FFE5E5E5" />
  <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#FFDCECFC" />
  <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#FF7Eb4EA" />
  <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#FFDAECFC" />
  <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#FF569DE5" />
  <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#FFF0F0F0" />
  <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#FFD9D9D9" />
  <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="#FFF0F0F0" />
  <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#FFACACAC" />
  <SolidColorBrush x:Key="SliderThumb.UpTrack.Background" Color="#FF2A313B" />
  <SolidColorBrush x:Key="SliderThumb.DownTrack.Background" Color="#FF4fb2f6" />
  <Style x:Key="UpRepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid Background="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}">
            <Rectangle Fill="{StaticResource SliderThumb.UpTrack.Background}" Width="4" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DownRepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid Background="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}">
            <Rectangle Fill="{StaticResource SliderThumb.DownTrack.Background}" Width="4" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
      <Ellipse Name="grip" Width="15" Height="15" Fill="#FFFFFFFF" Stretch="Fill" Stroke="#FFFFFFFF" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="grip" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Shape.Stroke" />
      </Trigger>
      <Trigger Property="Thumb.IsDragging" Value="True">
        <Setter TargetName="grip" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Shape.Fill" />
        <Setter TargetName="grip" Value="{StaticResource Button.Pressed.BackgroundBrush}" Property="Shape.Stroke" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}" Property="Shape.Fill" />
        <Setter TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}" Property="Shape.Stroke" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
    <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition MinWidth="{TemplateBinding FrameworkElement.MinWidth}" Width="Auto" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Track Name="PART_Track" Grid.Column="1">
          <Track.DecreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource DownRepeatButtonTransparent}" />
          </Track.DecreaseRepeatButton>
          <Track.IncreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource UpRepeatButtonTransparent}" />
          </Track.IncreaseRepeatButton>
          <Track.Thumb>
            <Thumb Name="Thumb" Margin="0,0,0.0,0" Focusable="False" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18" />
          </Track.Thumb>
        </Track>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
        <Setter TargetName="Thumb" Property="Control.Foreground" Value="#FF0000FF" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="VolumeVerticalSliderStyle" TargetType="{x:Type Slider}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Control.Foreground" Value="#FF008000" />
    <Setter Property="Control.Template" Value="{StaticResource SliderVertical}" />
  </Style>
  <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF4fb2f6" />
  <SolidColorBrush x:Key="ProgressBar.Background" Color="Black" />
  <Style x:Key="ProgramProgressBarStyle" TargetType="{x:Type ProgressBar}">
    <Setter Property="FrameworkElement.Height" Value="10" />
    <Setter Property="Control.Foreground" Value="{StaticResource ProgressBar.Progress}" />
    <Setter Property="Control.Background" Value="{StaticResource ProgressBar.Background}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid Name="TemplateRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Indeterminate">
                  <Storyboard RepeatBehavior="Forever">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                      <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                      <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                    </DoubleAnimationUsingKeyFrames>
                    <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                      <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                      <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                      <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                    </PointAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Background="{TemplateBinding Control.Background}" Opacity="0.7" />
            <Rectangle Name="PART_Track" />
            <Grid Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
              <Rectangle Name="Indicator" Fill="{TemplateBinding Control.Foreground}" />
              <Rectangle Name="Animation" Fill="{TemplateBinding Control.Foreground}" RenderTransformOrigin="0.5,0.5">
                <Rectangle.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform />
                    <SkewTransform />
                    <RotateTransform />
                    <TranslateTransform />
                  </TransformGroup>
                </Rectangle.RenderTransform>
              </Rectangle>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ProgressBar.Orientation" Value="Vertical">
              <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="True">
              <Setter TargetName="Indicator" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>