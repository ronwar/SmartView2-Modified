<UserControl x:Class="SmartView2.Views.MultimediaPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:b="clr-namespace:SmartView2.Behaviors"
             xmlns:common="clr-namespace:SmartView2.Common"
             xmlns:core="clr-namespace:SmartView2.Core;assembly=SmartView2.Core"
             xmlns:converter="clr-namespace:SmartView2.Converters"
             xmlns:animation="clr-namespace:SmartView2.Resources.Animation"
             AllowDrop="true">
  <FrameworkElement.Resources>
    <common:ViewTypeAndIsBackVisibleToBoolConverter x:Key="ViewTypeAndIsBackVisibleToBoolConverter"/>
    <common:ItemIndexIncrementConverter x:Key="_itemIndexConverter"/>
    <converter:ImageWithDefaultSourceConverter x:Key="TrackInFolderConverter"
                                               DefaultSource="pack://application:,,,/Resources/Images/indicator_music_nor.png"/>
    <common:ItemListToBoolConverter x:Key="selectedItemsConverter"/>
  </FrameworkElement.Resources>
  <Interaction.Behaviors>
    <b:UserControlDragAndDropBehavior Command="{Binding RemoveQueueItem}"/>
    <VisualStateBehavior VisualStateSource="{Binding CurrentHeader}">
      <VisualStateTrigger Value="Music" VisualState="Music"/>
      <VisualStateTrigger Value="VideoImage" VisualState="VideoImage"/>
      <VisualStateTrigger Value="None" VisualState="None"/>
      <VisualStateTrigger Value="NowPlaying" VisualState="NowPlaying"/>
    </VisualStateBehavior>
    <VisualStateBehavior VisualStateSource="{Binding MultiScreen.LoadState}">
      <VisualStateTrigger Value="Loading" VisualState="mediasharingLoadeing"/>
      <VisualStateTrigger Value="Loaded" VisualState="mediasharingNonLoadeing"/>
      <VisualStateTrigger Value="Failed" VisualState="mediasharingNonLoadeing"/>
      <VisualStateTrigger Value="Stoped" VisualState="mediasharingNonLoadeing"/>
    </VisualStateBehavior>
  </Interaction.Behaviors>
  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*"/>
      <ColumnDefinition Width="223"/>
    </Grid.ColumnDefinitions>
    <Grid Column="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="75"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid x:Name="multimediaHeader" Row="0" Background="{StaticResource InnerPanelsBgrBrush}">
        <StackPanel Orientation="Horizontal" Margin="30,0,0,0" HorizontalAlignment="Left">
          <ToggleButton Style="{StaticResource MultimediaMultiSelectionModeToggleButtonStyle}"
                        IsChecked="{Binding IsSelectionMode}">
            <UIElement.IsEnabled>
              <MultiBinding Converter="{StaticResource ViewTypeAndIsBackVisibleToBoolConverter}">
                <Binding Path="Controller.CurrentVM.ViewType" ElementName="_mainFrame"/>
                <Binding Path="Controller.CurrentVM.IsBackVisible" ElementName="_mainFrame"/>
              </MultiBinding>
            </UIElement.IsEnabled>
          </ToggleButton>
          <Button PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown"
                  Command="{Binding AddContentCommand}">
            <FrameworkElement.ContextMenu>
              <ContextMenu x:Name="addMenu" DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                <MenuItem Header="{Binding COM_SID_ADD_FILE, Source={StaticResource LocalizationSource}}"
                          Command="{Binding DataContext.AddFilesCommand}"/>
                <MenuItem Header="{Binding COM_SID_ADD_FOLDER, Source={StaticResource LocalizationSource}}"
                          Command="{Binding DataContext.AddFolderCommand}"/>
              </ContextMenu>
            </FrameworkElement.ContextMenu>
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MultimediaAddContentButtonStyle}">
                <Setter Property="FrameworkElement.Margin" Value="29,0,0,0"/>
                <Setter Property="FrameworkElement.Tag"
                        Value="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsSelectionMode}" Value="true">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Button>
          <Button Content="{Binding MAPP_SID_ADD_TO_QUEUE, Source={StaticResource LocalizationSource}}"
                  Command="{Binding AddToQueue}" CommandParameter="{Binding SelectedItems}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Button}" BasedOn="{StaticResource TheMostCommonButtonStyle}">
                <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsSelectionMode}" Value="true">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding SelectedItems, Converter={StaticResource selectedItemsConverter}}" Value="False">
                    <Setter Property="UIElement.IsEnabled" Value="false"/>
                  </DataTrigger>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding Controller.CurrentVM.ViewType, ElementName=_mainFrame}" Value="Folder"/>
                      <Condition Binding="{Binding Controller.CurrentVM.IsInsideFolder, ElementName=_mainFrame}" Value="false"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                  </MultiDataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Button>
          <Button Content="{Binding MAPP_SID_REMOVE_FILES, Source={StaticResource LocalizationSource}}"
                  Command="{Binding RemoveFilesCommand}" CommandParameter="{Binding SelectedItems}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Button}" BasedOn="{StaticResource TheMostCommonButtonStyle}">
                <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsSelectionMode}" Value="true">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding SelectedItems, Converter={StaticResource selectedItemsConverter}}" Value="false">
                    <Setter Property="UIElement.IsEnabled" Value="false"/>
                  </DataTrigger>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding Controller.CurrentVM.ViewType, ElementName=_mainFrame}" Value="Folder"/>
                      <Condition Binding="{Binding Controller.CurrentVM.IsInsideFolder, ElementName=_mainFrame}" Value="false"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                  </MultiDataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Button>
          <Button Content="{Binding MAPP_SID_REMOVE_FOLDER, Source={StaticResource LocalizationSource}}"
                  Command="{Binding RemoveFoldersCommand}" CommandParameter="{Binding SelectedItems}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Button}" BasedOn="{StaticResource TheMostCommonButtonStyle}">
                <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding IsSelectionMode}" Value="true"/>
                      <Condition Binding="{Binding Controller.CurrentVM.ViewType, ElementName=_mainFrame}" Value="Folder"/>
                      <Condition Binding="{Binding Controller.CurrentVM.IsInsideFolder, ElementName=_mainFrame}" Value="false"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                  </MultiDataTrigger>
                  <DataTrigger Binding="{Binding SelectedItems, Converter={StaticResource selectedItemsConverter}}" Value="false">
                    <Setter Property="UIElement.IsEnabled" Value="false"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Button>
        </StackPanel>
        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Grid.Column="1" VerticalAlignment="Bottom">
          <FrameworkElement.Style>
            <Style TargetType="{x:Type StackPanel}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding IsSelectionMode}" Value="true">
                  <Setter Property="UIElement.Visibility" Value="Hidden"/>
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </FrameworkElement.Style>
          <RadioButton Height="52" Width="150" Style="{StaticResource MMRadioButtonStyle}"
                       Content="{Binding COM_SID_PHOTOS, Source={StaticResource LocalizationSource}}"
                       Command="{Binding GoToImagesCommand}" IsChecked="{Binding PhotoChecked}"/>
          <RadioButton Height="52" Width="150" Style="{StaticResource MMRadioButtonStyle}"
                       Content="{Binding COM_SID_MUSIC, Source={StaticResource LocalizationSource}}"
                       Command="{Binding GoToMusicCommand}" IsChecked="{Binding MusicChecked}"/>
          <RadioButton Height="52" Width="150" Style="{StaticResource MMRadioButtonStyle}"
                       Content="{Binding COM_SID_VIDEOS, Source={StaticResource LocalizationSource}}"
                       Command="{Binding GoToVideoCommand}" IsChecked="{Binding VideoChecked}"/>
        </StackPanel>
        <Grid HorizontalAlignment="Right">
          <FrameworkElement.Style>
            <Style TargetType="{x:Type Grid}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding IsSelectionMode}" Value="true">
                  <Setter Property="UIElement.Visibility" Value="Hidden"/>
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </FrameworkElement.Style>
          <ComboBox x:Name="MusicComboBox" IsEnabled="{Binding ComboBoxMusicEnabled}"
                    SelectedIndex="{Binding ComboBoxMusicCurrentState, Mode=TwoWay}">
            <FrameworkElement.Style>
              <Style BasedOn="{StaticResource ComboBoxStyle1}" TargetType="{x:Type ComboBox}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding MusicChecked}" Value="false">
                    <Setter Property="UIElement.Visibility" Value="Hidden"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
            <ComboBoxItem Content="{Binding COM_BDP_STR_MODE_REPEAT_TRACK_ONE_KR_SONG, Source={StaticResource LocalizationSource}}"/>
            <ComboBoxItem Content="{Binding COM_SID_ARTIST, Source={StaticResource LocalizationSource}}"/>
            <ComboBoxItem Content="{Binding COM_SID_ALBUM, Source={StaticResource LocalizationSource}}"/>
            <ComboBoxItem Content="{Binding COM_SID_GENRE, Source={StaticResource LocalizationSource}}"/>
            <ComboBoxItem Content="{Binding COM_SID_FOLDER, Source={StaticResource LocalizationSource}}"/>
            <Interaction.Behaviors>
              <b:ComboBoxSelectionChangedBehavior Command="{Binding InnerViewChangedCommand}"/>
            </Interaction.Behaviors>
          </ComboBox>
          <ComboBox x:Name="VideoImageComboBox" IsEnabled="{Binding ComboBoxVIEnabled}"
                    SelectedIndex="{Binding ComboBoxVICurrentState, Mode=TwoWay}">
            <FrameworkElement.Style>
              <Style BasedOn="{StaticResource ComboBoxStyle1}" TargetType="{x:Type ComboBox}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding MusicChecked}" Value="True">
                    <Setter Property="UIElement.Visibility" Value="Hidden"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
            <ComboBoxItem Content="{Binding COM_SID_DATE, Source={StaticResource LocalizationSource}}"/>
            <ComboBoxItem Content="{Binding COM_SID_TITLE, Source={StaticResource LocalizationSource}}"/>
            <ComboBoxItem Content="{Binding COM_SID_FOLDER, Source={StaticResource LocalizationSource}}"/>
            <Interaction.Behaviors>
              <b:ComboBoxSelectionChangedBehavior Command="{Binding InnerViewChangedCommand}"/>
            </Interaction.Behaviors>
          </ComboBox>
        </Grid>
      </Grid>
      <Grid x:Name="nowPlayingHeader" Row="0" Background="{StaticResource InnerPanelsBgrBrush}"
            Visibility="Collapsed">
        <Button HorizontalAlignment="Left" Style="{StaticResource TransparentButtonStyle}" Height="22" Width="14"
                Margin="33,0,0,0" Command="{Binding NowPlayingGoBack}">
          <Path Data="{StaticResource BackButtonGeometryGroup}" StrokeThickness="2" Stretch="Uniform"
                Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        </Button>
        <TextBlock FontFamily="Calibri" FontSize="24pt" FontWeight="Bold" HorizontalAlignment="Center"
                   Style="{StaticResource WhiteTextBlockStyle}" VerticalAlignment="Center"
                   Text="{Binding COM_SID_NOW_PLAYING, Source={StaticResource LocalizationSource}}"/>
      </Grid>
      <Grid Row="1">
        <FrameExt x:Name="_mainFrame" Controller="{Binding InnerController}"/>
      </Grid>
    </Grid>
    <Grid x:Name="QueueGrid" Column="1" Background="{StaticResource InnerPanelsBgrBrush}"
          VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Border BorderThickness="1,1,0,0" BorderBrush="{StaticResource InnerLittleBordersBrush}">
        <StackPanel Grid.Row="0" Background="Transparent">
          <Button Content="{Binding MAPP_SID_PLAY_ON_TV, Source={StaticResource LocalizationSource}}"
                  Command="{Binding PlayOnTv}" CommandParameter="{Binding SelectedQueueFile}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Button}" BasedOn="{StaticResource TheMostCommonButtonStyle}">
                <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter Property="UIElement.IsEnabled" Value="false"/>
                <Setter Property="FrameworkElement.Height" Value="42"/>
                <Setter Property="FrameworkElement.Width" Value="162"/>
                <Setter Property="FrameworkElement.Margin" Value="0,16"/>
                <Setter Property="Control.FontSize" Value="16.5pt"/>
                <Setter Property="Control.FontFamily" Value="Arial"/>
                <Setter Property="Control.FontWeight" Value="Bold"/>
                <Style.Triggers>
                  <DataTrigger Value="{x:Static core:MediaState.Stop}" Binding="{Binding MultiScreen.QueueState}">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding IsQueueReady}" Value="False">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding IsQueueReady}" Value="True">
                    <Setter Property="UIElement.IsEnabled" Value="true"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Button>
          <Border Grid.Row="1" BorderThickness="0,0,0,0">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Border}">
                <Style.Triggers>
                  <DataTrigger Value="{x:Static core:MediaState.Stop}" Binding="{Binding MultiScreen.QueueState}">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding IsQueueReady}" Value="False">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
            <Grid Margin="22,17">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Button Grid.Column="0" Style="{StaticResource QueuePrevButtonStyle}" Margin="3"
                      Command="{Binding PlayPreviousFile}"/>
              <Button Grid.Column="1" Margin="3" Command="{Binding Play}">
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type Button}" BasedOn="{StaticResource QueuePlayButtonStyle}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding MultiScreen.MediaState}" Value="Stop">
                        <Setter Property="UIElement.Visibility" Value="Visible"/>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding MultiScreen.MediaState}" Value="Pause">
                        <Setter Property="UIElement.Visibility" Value="Visible"/>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding MultiScreen.MediaState}" Value="Play">
                        <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </Button>
              <Button Grid.Column="1" Margin="3" Command="{Binding Pause}">
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type Button}" BasedOn="{StaticResource QueuePauseButtonStyle}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding MultiScreen.MediaState}" Value="Stop">
                        <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding MultiScreen.MediaState}" Value="Pause">
                        <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding MultiScreen.MediaState}" Value="Play">
                        <Setter Property="UIElement.Visibility" Value="Visible"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </Button>
              <Button Grid.Column="2" Margin="3" Command="{Binding PlayNextFile}">
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type Button}" BasedOn="{StaticResource QueueNextButtonStyle}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsQueueReady}" Value="False">
                        <Setter Property="UIElement.IsEnabled" Value="false"/>
                      </DataTrigger>
                      <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                          <Condition Binding="{Binding MultiScreen.CurrentMediaContent}" Value="{x:Null}"/>
                          <Condition Binding="{Binding MultiScreen.MediaQueueCount}" Value="1"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                          <Setter Property="UIElement.IsEnabled" Value="false"/>
                        </MultiDataTrigger.Setters>
                      </MultiDataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </Button>
            </Grid>
          </Border>
          <Grid Margin="0,0,0,18">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock Grid.ColumnSpan="2" Foreground="{StaticResource TextBlock.Static.ForegroundBrush}"
                       HorizontalAlignment="Center" FontSize="15pt" FontFamily="Arial" Height="36"
                       VerticalAlignment="Center" FontWeight="Bold"
                       Text="{Binding COM_SID_NOW_PLAYING, Source={StaticResource LocalizationSource}}"/>
            <Grid Row="1" RowSpan="2" Width="138">
              <Image Height="136" Width="136" Stretch="Fill"
                     Source="{Binding MultiScreen.CurrentMediaContent.Thumbnail}"/>
              <Image HorizontalAlignment="Right" VerticalAlignment="Top" Width="42" Height="42" Margin="0,5,5,0">
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type Image}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding MultiScreen.CurrentMediaContent.ContentType}" Value="Image">
                        <Setter Property="Image.Source" Value="{StaticResource ImageIconImage}"/>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding MultiScreen.CurrentMediaContent.ContentType}" Value="Track">
                        <Setter Property="Image.Source" Value="{StaticResource MusicIconImage}"/>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding MultiScreen.CurrentMediaContent.ContentType}" Value="Video">
                        <Setter Property="Image.Source" Value="{StaticResource VideoIconImage}"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </Image>
            </Grid>
            <Border Grid.Row="2" Background="Black" Opacity="0.7" HorizontalAlignment="Stretch" Width="136">
              <FrameworkElement.Style>
                <Style TargetType="{x:Type Border}">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding ContentType}" Value="Image">
                      <Setter Property="UIElement.Visibility" Value="Hidden"/>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </FrameworkElement.Style>
            </Border>
            <TextBlock Grid.Row="2" Text="{Binding MultiScreen.CurrentMediaContent.Name}">
              <FrameworkElement.Style>
                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                  <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
                  <Setter Property="TextBlock.TextAlignment" Value="Left"/>
                  <Setter Property="FrameworkElement.Margin" Value="10,1"/>
                  <Setter Property="FrameworkElement.MaxWidth" Value="116"/>
                  <Setter Property="TextBlock.Foreground" Value="White"/>
                  <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis"/>
                  <Setter Property="TextBlock.FontFamily" Value="Arial"/>
                  <Setter Property="TextBlock.FontSize" Value="13.5pt"/>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding ContentType}" Value="Image">
                      <Setter Property="UIElement.Visibility" Value="Hidden"/>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </FrameworkElement.Style>
            </TextBlock>
            <UIElement.InputBindings>
              <MouseBinding MouseAction="LeftClick" Command="{Binding GoToNowPlaying}"/>
            </UIElement.InputBindings>
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Grid}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding MultiScreen.CurrentMediaContent}" Value="{x:Null}">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Grid>
        </StackPanel>
      </Border>
      <Border Grid.Row="1" Height="150" Width="150" VerticalAlignment="Top" HorizontalAlignment="Center"
              Background="#FF2B323B">
        <FrameworkElement.Style>
          <Style TargetType="{x:Type Border}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsQueueReady}" Value="True">
                <Setter Property="UIElement.Visibility" Value="Collapsed"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </FrameworkElement.Style>
        <TextBlock Foreground="Gray" Margin="6,40" TextWrapping="Wrap" VerticalAlignment="Center"
                   HorizontalAlignment="Center" TextAlignment="Center" FontFamily="Arial" FontSize="13.5pt"
                   Text="{Binding MAPP_SID_DRAG_CONTENT_HERE, Source={StaticResource LocalizationSource}}"/>
      </Border>
      <ListBox x:Name="_listBox" Background="Transparent" BorderThickness="1,0,0,0"
               BorderBrush="{StaticResource InnerLittleBordersBrush}" ScrollViewer.CanContentScroll="false"
               Grid.Row="1" Style="{StaticResource QueueStyle}" ItemsSource="{Binding MultiScreen.MediaQueue}"
               SelectedItem="{Binding SelectedQueueFile}">
        <ItemsControl.ItemContainerStyle>
          <Style TargetType="{x:Type ListBoxItem}">
            <Setter Property="Control.Padding" Value="0,0,0,40"/>
            <Setter Property="FrameworkElement.ContextMenu">
              <Setter.Value>
                <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                  <MenuItem Header="{Binding COM_SID_MOVE_UP, Source={StaticResource LocalizationSource}}"
                            Command="{Binding Tag.MoveItemUp}" CommandParameter="{Binding DataContext}"/>
                  <MenuItem Header="{Binding COM_SID_MOVE_DOWN, Source={StaticResource LocalizationSource}}"
                            Command="{Binding Tag.MoveItemDown}" CommandParameter="{Binding DataContext}"/>
                  <MenuItem Header="{Binding COM_SID_REMOVE_FROM_QUEUE, Source={StaticResource LocalizationSource}}"
                            Command="{Binding Tag.RemoveQueueItem}" CommandParameter="{Binding DataContext}"/>
                  <FrameworkElement.Style>
                    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource MainContextMenuStyle}">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding Tag.IsQueueReady}" Value="False">
                          <Setter Property="ContextMenu.IsOpen" Value="false"/>
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </FrameworkElement.Style>
                </ContextMenu>
              </Setter.Value>
            </Setter>
            <Setter Property="FrameworkElement.Tag"
                    Value="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
            <Setter Property="UIElement.AllowDrop" Value="true"/>
          </Style>
        </ItemsControl.ItemContainerStyle>
        <ItemsControl.ItemTemplate>
          <DataTemplate>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <TextBlock HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="18pt" FontFamily="Calibri"
                         FontWeight="Bold" Width="20" TextAlignment="Right"
                         Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Converter={StaticResource _itemIndexConverter}}"/>
              <Grid Column="1" RowSpan="2" Margin="12,0">
                <Image Height="150" Width="150" Stretch="Fill" Source="{Binding Thumbnail}"/>
                <Image HorizontalAlignment="Right" VerticalAlignment="Top" Width="42" Height="42" Margin="0,5,5,0">
                  <FrameworkElement.Style>
                    <Style TargetType="{x:Type Image}">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding ContentType}" Value="Image">
                          <Setter Property="Image.Source" Value="{StaticResource ImageIconImage}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ContentType}" Value="Track">
                          <Setter Property="Image.Source" Value="{StaticResource MusicIconImage}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ContentType}" Value="Video">
                          <Setter Property="Image.Source" Value="{StaticResource VideoIconImage}"/>
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </FrameworkElement.Style>
                </Image>
              </Grid>
              <Border Grid.Row="1" Grid.Column="1" Background="Black" Opacity="0.7" HorizontalAlignment="Stretch"
                      Width="150">
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type Border}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ContentType}" Value="Image">
                        <Setter Property="UIElement.Visibility" Value="Hidden"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </Border>
              <TextBlock Grid.Row="1" Grid.Column="1" VerticalAlignment="Bottom" HorizontalAlignment="Center"
                         TextAlignment="Left" Margin="6,3" MaxWidth="138" Text="{Binding Name}">
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type TextBlock}">
                    <Setter Property="TextBlock.FontFamily" Value="Arial"/>
                    <Setter Property="TextBlock.FontSize" Value="20pt"/>
                    <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis"/>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ContentType}" Value="Image">
                        <Setter Property="UIElement.Visibility" Value="Hidden"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </TextBlock>
            </Grid>
          </DataTemplate>
        </ItemsControl.ItemTemplate>
        <Interaction.Behaviors>
          <b:ItemsControlRemoveOrReplaceItemBehavior RemoveCommand="{Binding RemoveQueueItem}" ReplaceCommand="{Binding ReplaceQueueItem}"/>
          <b:ItemsControlAddItemBehavior Command="{Binding AddToQueue}"/>
        </Interaction.Behaviors>
      </ListBox>
    </Grid>
    <Grid x:Name="mediasharingLoadingGrid" Column="1" Background="#55555555">
      <animation:LoadingAnimation HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>
    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup>
        <VisualState Name="mediasharingLoadeing">
          <Storyboard>
            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="mediasharingLoadingGrid"  Storyboard.TargetProperty="Visibility">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </VisualState>
        <VisualState Name="mediasharingNonLoadeing">
          <Storyboard>
            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="mediasharingLoadingGrid"  Storyboard.TargetProperty="Visibility">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Hidden}"/>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </VisualState>
      </VisualStateGroup>
      <VisualStateGroup>
        <VisualState Name="Music">
          <Storyboard>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility" Storyboard.Target="{x:Reference MusicComboBox}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference VideoImageComboBox}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference nowPlayingHeader}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference multimediaHeader}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </VisualState>
        <VisualState Name="VideoImage">
          <Storyboard>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility" Storyboard.Target="{x:Reference MusicComboBox}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference VideoImageComboBox}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference nowPlayingHeader}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference multimediaHeader}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </VisualState>
        <VisualState Name="None">
          <Storyboard>
            <BooleanAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="IsEnabled" Storyboard.Target="{x:Reference MusicComboBox}">
              <DiscreteBooleanKeyFrame Value="false"/>
            </BooleanAnimationUsingKeyFrames>
            <BooleanAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="IsEnabled"
                                            Storyboard.Target="{x:Reference VideoImageComboBox}">
              <DiscreteBooleanKeyFrame Value="false"/>
            </BooleanAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference nowPlayingHeader}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference multimediaHeader}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </VisualState>
        <VisualState Name="NowPlaying">
          <Storyboard>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility" Storyboard.Target="{x:Reference MusicComboBox}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference VideoImageComboBox}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference nowPlayingHeader}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Duration="0"  Storyboard.TargetProperty="Visibility"
                                           Storyboard.Target="{x:Reference multimediaHeader}">
              <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </VisualState>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
</UserControl>